package com.werb.pickphotoview.adapter;import android.content.Context;import android.content.Intent;import android.graphics.PorterDuff;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Build;import android.os.Handler;import android.os.Looper;import android.provider.MediaStore;import android.support.v4.content.ContextCompat;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.werb.pickphotoview.PickPhotoActivity;import com.werb.pickphotoview.R;import com.werb.pickphotoview.model.MediaModel;import com.werb.pickphotoview.model.PickData;import com.werb.pickphotoview.model.PickHolder;import com.werb.pickphotoview.util.PickConfig;import com.werb.pickphotoview.util.PickUtils;import java.io.File;import java.io.IOException;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.List;/** * Created by wanbo on 2016/12/31. */public class PickGridAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {    private ArrayList<String> imagePaths;    private ArrayList<MediaModel> mediaModels;    private boolean isShowCamera;    private boolean isClickSelectable;    private int spanCount;    private int maxSelectSize;    private int selectIconColor;    private List<String> selectPath = new ArrayList<>();    private ArrayList<MediaModel> selectMedias;    private PickPhotoActivity context;    private View.OnClickListener imgClick;    private int scaleSize;    private Context mContext;//    public PickGridAdapter(Context context, ArrayList<String> imagePaths, PickData pickData, View.OnClickListener imgClick) {    public PickGridAdapter(Context context, ArrayList<MediaModel> mediaModels, PickData pickData, View.OnClickListener imgClick) {        this.mContext = context;        this.context = (PickPhotoActivity) context;        this.imagePaths = imagePaths;        this.mediaModels = mediaModels;        this.isShowCamera = pickData.isShowCamera();        this.spanCount = pickData.getSpanCount();        this.maxSelectSize = pickData.getPickPhotoSize();        this.isClickSelectable = pickData.isClickSelectable();        this.selectIconColor = pickData.getSelectIconColor();        this.imgClick = imgClick;//        selectPath = PickHolder.getStringPaths();        selectMedias = PickHolder.getMeidas();        buildScaleSize();    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        if (viewType == PickConfig.CAMERA_TYPE) {            return new CameraViewHolder(LayoutInflater.from(context).inflate(R.layout.pick_item_camera_layout, parent, false));        } else {            return new GridImageViewHolder(LayoutInflater.from(context).inflate(R.layout.pick_item_grid_layout, parent, false));        }    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (holder instanceof GridImageViewHolder) {            String path;            MediaModel mediaModel;            if (isShowCamera) {//                path = imagePaths.get(position - 1);                mediaModel = mediaModels.get(position - 1);                path = mediaModels.get(position - 1).getPath();            } else {//                path = imagePaths.get(position);                mediaModel = mediaModels.get(position);                path = mediaModels.get(position).getPath();            }            GridImageViewHolder gridImageViewHolder = (GridImageViewHolder) holder;//            gridImageViewHolder.bindItem(path);            gridImageViewHolder.bindItem(mediaModel,path);        }    }    @Override    public int getItemViewType(int position) {        if (isShowCamera) {            if (position == 0) {                return PickConfig.CAMERA_TYPE;            } else {                return position;            }        } else {            return position;        }    }    @Override    public int getItemCount() {        if (isShowCamera) {//            return imagePaths.size() + 1;            return mediaModels.size() + 1;        } else {//            return imagePaths.size();            return mediaModels.size();        }    }    @Override    public void onViewRecycled(RecyclerView.ViewHolder holder) {        if(holder instanceof GridImageViewHolder) {            GridImageViewHolder gridImageViewHolder = (GridImageViewHolder) holder;            Glide.with(context).clear(gridImageViewHolder.weekImage);        }        super.onViewRecycled(holder);    }    public void updateData(ArrayList<MediaModel> mediaModels) {        this.mediaModels = mediaModels;        notifyDataSetChanged();    }/*    public void updateData(ArrayList<String> paths) {        imagePaths = paths;        notifyDataSetChanged();    }*/    // ViewHolder    private class GridImageViewHolder extends RecyclerView.ViewHolder {        private ImageView selectImage, weekImage;        private FrameLayout selectLayout;        private TextView mTVtips;        GridImageViewHolder(View itemView) {            super(itemView);            ImageView gridImage = (ImageView) itemView.findViewById(R.id.iv_grid);            selectImage = (ImageView) itemView.findViewById(R.id.iv_select);            selectLayout = (FrameLayout) itemView.findViewById(R.id.frame_select_layout);            mTVtips = (TextView) itemView.findViewById(R.id.iv_tips);            RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) gridImage.getLayoutParams();            params.width = scaleSize;            params.height = scaleSize;            final WeakReference<ImageView> imageViewWeakReference = new WeakReference<>(gridImage);            weekImage = imageViewWeakReference.get();        }        void bindItem(MediaModel mediaModel,final String path) {            if (selectPath.contains(path)) {//            if (selectMedias.contains(path)) {                select();            } else {                unSelect();            }            if (weekImage != null) {                Glide.with(context)                        .load(Uri.parse("file://" + path))                        .into(weekImage);//                selectLayout.setTag(R.id.pick_image_path,mediaModel);                selectLayout.setTag(R.id.pick_image_path,mediaModel);                if(maxSelectSize == 1){                    selectLayout.setOnClickListener(singleClick);                }else {                    selectLayout.setOnClickListener(moreClick);                }//                weekImage.setTag(R.id.pick_image_path, path);                weekImage.setTag(R.id.pick_image_path, mediaModel);                if (isClickSelectable)                {                    if(maxSelectSize == 1){                        weekImage.setOnClickListener(singleClick);                    }else {                        weekImage.setOnClickListener(moreClick);                    }                }                else                {                    weekImage.setOnClickListener(imgClick);                }            }            mTVtips.setVisibility(mediaModel.getMimeType().contains("video")?View.VISIBLE:View.GONE);            if (mediaModel.getMimeType().contains("video")){                mTVtips.setText(mediaModel.getDurationStr()+"");            }        }        void select() {            Drawable drawable = ContextCompat.getDrawable(mContext, R.mipmap.pick_ic_select);            drawable.clearColorFilter();            drawable.setColorFilter(selectIconColor, PorterDuff.Mode.SRC_ATOP);            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {                selectImage.setBackground(ContextCompat.getDrawable(mContext, R.mipmap.pick_ic_select));            }            else            {                //noinspection deprecation                selectImage.setBackgroundDrawable(ContextCompat.getDrawable(mContext, R.mipmap.pick_ic_select));            }            selectImage.setTag(R.id.pick_is_select, true);        }        void unSelect() {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {                selectImage.setBackground(ContextCompat.getDrawable(mContext, R.mipmap.pick_ic_un_select));            }            else            {                //noinspection deprecation                selectImage.setBackgroundDrawable(ContextCompat.getDrawable(mContext, R.mipmap.pick_ic_un_select));            }            selectImage.setTag(R.id.pick_is_select, false);        }//        void addPath(String path) {        void addPath(MediaModel path) {//            selectPath.add(path);            selectMedias.add(path);            if (!selectPath.contains(path.getPath())){                selectPath.add(path.getPath());            }//            PickHolder.setStringPaths(selectMedias);            PickHolder.setSelectedMedia(selectMedias);//            context.updateSelectText(String.valueOf(selectPath.size()));            context.updateSelectText(String.valueOf(selectMedias.size()));        }//        void removePath(String path) {        void removePath(MediaModel mediaModel) {//            selectPath.remove(path);            selectMedias.remove(mediaModel);            if (selectPath.contains(mediaModel.getPath())){                selectPath.remove(mediaModel.getPath());            }//            PickHolder.setStringPaths(selectPath);            PickHolder.setSelectedMedia(selectMedias);//            context.updateSelectText(String.valueOf(selectPath.size()));            context.updateSelectText(String.valueOf(selectMedias.size()));        }        View.OnClickListener moreClick = new View.OnClickListener() {            @Override            public void onClick(View v) {                MediaModel path = (MediaModel) v.getTag(R.id.pick_image_path);                boolean isSelect = (boolean) selectImage.getTag(R.id.pick_is_select);                if (isSelect) {                    if (selectPath.contains(path.getPath())) {//                    if (selectMedias.contains(path)) {                        unSelect();                        removePath(path);                    }                } else {                    if (selectMedias.size() < maxSelectSize) {//                        if (!selectMedias.contains(path)) {                        if (!selectPath.contains(path.getPath())) {                            select();                            addPath(path);                        }                    } else {                        Toast.makeText(context, String.format(context.getString(R.string.pick_photo_size_limit), String.valueOf(maxSelectSize)), Toast.LENGTH_SHORT).show();                    }                }            }        };        View.OnClickListener singleClick = new View.OnClickListener() {            @Override            public void onClick(View v) {                if(selectMedias.size() == maxSelectSize){                    Toast.makeText(context, String.format(context.getString(R.string.pick_photo_size_limit), String.valueOf(maxSelectSize)), Toast.LENGTH_SHORT).show();                    return;                }                MediaModel path = (MediaModel) v.getTag(R.id.pick_image_path);                select();                addPath(path);                context.select();            }        };    }    private class CameraViewHolder extends RecyclerView.ViewHolder {        CameraViewHolder(View itemView) {            super(itemView);            ViewGroup.LayoutParams params = itemView.getLayoutParams();            params.width = scaleSize;            params.height = scaleSize;            itemView.setOnClickListener(cameraClick);        }        View.OnClickListener cameraClick = new View.OnClickListener() {            @Override            public void onClick(View v) {                if (onItemClickListener!=null){                    onItemClickListener.onCameraClick();                }               /* try {                    File photoFile = PickUtils.getInstance(context).getPhotoFile(v.getContext());                    photoFile.delete();                    if (photoFile.createNewFile()) {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        intent.putExtra(MediaStore.EXTRA_OUTPUT, PickUtils.getInstance(context).getUri(photoFile));                        context.startActivityForResult(intent, PickConfig.CAMERA_PHOTO_DATA);                    }                } catch (IOException e) {                    e.printStackTrace();                }*/            }        };    }    private void buildScaleSize() {        int screenWidth = PickUtils.getInstance(context).getWidthPixels();        int space = PickUtils.getInstance(context).dp2px(PickConfig.ITEM_SPACE);        scaleSize = (screenWidth - (spanCount + 1) * space) / spanCount;    }    public ArrayList<MediaModel> getSelectMeida() {        return selectMedias;    }    public void setSelectMedia(ArrayList<MediaModel> selectMedias){        this.selectMedias = selectMedias;        serSelectedPath(selectMedias);    }    private void serSelectedPath(ArrayList<MediaModel> selectMedias){        List<String> list = new ArrayList<>();        for (MediaModel m :                selectMedias) {            list.add(m.getPath());        }        this.selectPath = list;    }/*    public void setSelectMedia(ArrayList<String> selectPath){        this.selectPath = selectPath;    }*/    private Handler handler = new Handler(Looper.getMainLooper());    private OnItemClickListener onItemClickListener;    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {        this.onItemClickListener = onItemClickListener;    }    public interface OnItemClickListener{        void onCameraClick();        void onGallery(int position);    }}