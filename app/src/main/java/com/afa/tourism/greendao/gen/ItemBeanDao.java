package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.mdruby.cameravideo.bean.ItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM_BEAN".
*/
public class ItemBeanDao extends AbstractDao<ItemBean, Integer> {

    public static final String TABLENAME = "ITEM_BEAN";

    /**
     * Properties of entity ItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ItemNo = new Property(0, int.class, "ItemNo", true, "ITEM_NO");
        public final static Property ItemName = new Property(1, String.class, "ItemName", false, "ITEM_NAME");
        public final static Property SectionNo = new Property(2, int.class, "SectionNo", false, "SECTION_NO");
        public final static Property SectionName = new Property(3, String.class, "SectionName", false, "SECTION_NAME");
        public final static Property UIType = new Property(4, String.class, "UIType", false, "UITYPE");
        public final static Property ValueUnit = new Property(5, String.class, "ValueUnit", false, "VALUE_UNIT");
        public final static Property ItemValue = new Property(6, String.class, "ItemValue", false, "ITEM_VALUE");
    }


    public ItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM_BEAN\" (" + //
                "\"ITEM_NO\" INTEGER PRIMARY KEY NOT NULL ," + // 0: ItemNo
                "\"ITEM_NAME\" TEXT," + // 1: ItemName
                "\"SECTION_NO\" INTEGER NOT NULL ," + // 2: SectionNo
                "\"SECTION_NAME\" TEXT," + // 3: SectionName
                "\"UITYPE\" TEXT," + // 4: UIType
                "\"VALUE_UNIT\" TEXT," + // 5: ValueUnit
                "\"ITEM_VALUE\" TEXT);"); // 6: ItemValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getItemNo());
 
        String ItemName = entity.getItemName();
        if (ItemName != null) {
            stmt.bindString(2, ItemName);
        }
        stmt.bindLong(3, entity.getSectionNo());
 
        String SectionName = entity.getSectionName();
        if (SectionName != null) {
            stmt.bindString(4, SectionName);
        }
 
        String UIType = entity.getUIType();
        if (UIType != null) {
            stmt.bindString(5, UIType);
        }
 
        String ValueUnit = entity.getValueUnit();
        if (ValueUnit != null) {
            stmt.bindString(6, ValueUnit);
        }
 
        String ItemValue = entity.getItemValue();
        if (ItemValue != null) {
            stmt.bindString(7, ItemValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getItemNo());
 
        String ItemName = entity.getItemName();
        if (ItemName != null) {
            stmt.bindString(2, ItemName);
        }
        stmt.bindLong(3, entity.getSectionNo());
 
        String SectionName = entity.getSectionName();
        if (SectionName != null) {
            stmt.bindString(4, SectionName);
        }
 
        String UIType = entity.getUIType();
        if (UIType != null) {
            stmt.bindString(5, UIType);
        }
 
        String ValueUnit = entity.getValueUnit();
        if (ValueUnit != null) {
            stmt.bindString(6, ValueUnit);
        }
 
        String ItemValue = entity.getItemValue();
        if (ItemValue != null) {
            stmt.bindString(7, ItemValue);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public ItemBean readEntity(Cursor cursor, int offset) {
        ItemBean entity = new ItemBean( //
            cursor.getInt(offset + 0), // ItemNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ItemName
            cursor.getInt(offset + 2), // SectionNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SectionName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UIType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ValueUnit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // ItemValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemBean entity, int offset) {
        entity.setItemNo(cursor.getInt(offset + 0));
        entity.setItemName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSectionNo(cursor.getInt(offset + 2));
        entity.setSectionName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUIType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValueUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItemValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(ItemBean entity, long rowId) {
        return entity.getItemNo();
    }
    
    @Override
    public Integer getKey(ItemBean entity) {
        if(entity != null) {
            return entity.getItemNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
